// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/co/reservationstore (interfaces: Manager)

// Package mock_reservationstore is a generated GoMock package.
package mock_reservationstore

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	reservation "github.com/scionproto/scion/go/co/reservation"
	segment "github.com/scionproto/scion/go/co/reservation/segment"
	addr "github.com/scionproto/scion/go/lib/addr"
	path "github.com/scionproto/scion/go/lib/slayers/path"
	snet "github.com/scionproto/scion/go/lib/snet"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ActivateRequest mocks base method.
func (m *MockManager) ActivateRequest(arg0 context.Context, arg1 *reservation.Request, arg2 reservation.PathSteps, arg3 path.Path, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateRequest", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateRequest indicates an expected call of ActivateRequest.
func (mr *MockManagerMockRecorder) ActivateRequest(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateRequest", reflect.TypeOf((*MockManager)(nil).ActivateRequest), arg0, arg1, arg2, arg3, arg4)
}

// DeleteExpiredIndices mocks base method.
func (m *MockManager) DeleteExpiredIndices(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredIndices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredIndices indicates an expected call of DeleteExpiredIndices.
func (mr *MockManagerMockRecorder) DeleteExpiredIndices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredIndices", reflect.TypeOf((*MockManager)(nil).DeleteExpiredIndices), arg0)
}

// GetReservationsAtSource mocks base method.
func (m *MockManager) GetReservationsAtSource(arg0 context.Context) ([]*segment.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationsAtSource", arg0)
	ret0, _ := ret[0].([]*segment.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationsAtSource indicates an expected call of GetReservationsAtSource.
func (mr *MockManagerMockRecorder) GetReservationsAtSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationsAtSource", reflect.TypeOf((*MockManager)(nil).GetReservationsAtSource), arg0)
}

// LocalIA mocks base method.
func (m *MockManager) LocalIA() addr.IA {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalIA")
	ret0, _ := ret[0].(addr.IA)
	return ret0
}

// LocalIA indicates an expected call of LocalIA.
func (mr *MockManagerMockRecorder) LocalIA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalIA", reflect.TypeOf((*MockManager)(nil).LocalIA))
}

// Name mocks base method.
func (m *MockManager) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockManagerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockManager)(nil).Name))
}

// Now mocks base method.
func (m *MockManager) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockManagerMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockManager)(nil).Now))
}

// PathsTo mocks base method.
func (m *MockManager) PathsTo(arg0 context.Context, arg1 addr.IA) ([]snet.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathsTo", arg0, arg1)
	ret0, _ := ret[0].([]snet.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PathsTo indicates an expected call of PathsTo.
func (mr *MockManagerMockRecorder) PathsTo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathsTo", reflect.TypeOf((*MockManager)(nil).PathsTo), arg0, arg1)
}

// Run mocks base method.
func (m *MockManager) Run(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockManagerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockManager)(nil).Run), arg0)
}

// SetupRequest mocks base method.
func (m *MockManager) SetupRequest(arg0 context.Context, arg1 *segment.SetupReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupRequest indicates an expected call of SetupRequest.
func (mr *MockManagerMockRecorder) SetupRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupRequest", reflect.TypeOf((*MockManager)(nil).SetupRequest), arg0, arg1)
}
