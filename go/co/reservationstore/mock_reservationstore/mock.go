// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/co/reservationstore (interfaces: ServiceFacilitator)

// Package mock_reservationstore is a generated GoMock package.
package mock_reservationstore

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reservation "github.com/scionproto/scion/go/co/reservation"
	segment "github.com/scionproto/scion/go/co/reservation/segment"
	addr "github.com/scionproto/scion/go/lib/addr"
	colibri "github.com/scionproto/scion/go/lib/slayers/path/colibri"
	snet "github.com/scionproto/scion/go/lib/snet"
)

// MockServiceFacilitator is a mock of ServiceFacilitator interface.
type MockServiceFacilitator struct {
	ctrl     *gomock.Controller
	recorder *MockServiceFacilitatorMockRecorder
}

// MockServiceFacilitatorMockRecorder is the mock recorder for MockServiceFacilitator.
type MockServiceFacilitatorMockRecorder struct {
	mock *MockServiceFacilitator
}

// NewMockServiceFacilitator creates a new mock instance.
func NewMockServiceFacilitator(ctrl *gomock.Controller) *MockServiceFacilitator {
	mock := &MockServiceFacilitator{ctrl: ctrl}
	mock.recorder = &MockServiceFacilitatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceFacilitator) EXPECT() *MockServiceFacilitatorMockRecorder {
	return m.recorder
}

// ActivateRequest mocks base method.
func (m *MockServiceFacilitator) ActivateRequest(arg0 context.Context, arg1 *reservation.Request, arg2 reservation.PathSteps, arg3 *colibri.ColibriPathMinimal, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateRequest", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateRequest indicates an expected call of ActivateRequest.
func (mr *MockServiceFacilitatorMockRecorder) ActivateRequest(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateRequest", reflect.TypeOf((*MockServiceFacilitator)(nil).ActivateRequest), arg0, arg1, arg2, arg3, arg4)
}

// DeleteExpiredIndices mocks base method.
func (m *MockServiceFacilitator) DeleteExpiredIndices(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredIndices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredIndices indicates an expected call of DeleteExpiredIndices.
func (mr *MockServiceFacilitatorMockRecorder) DeleteExpiredIndices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredIndices", reflect.TypeOf((*MockServiceFacilitator)(nil).DeleteExpiredIndices), arg0)
}

// GetReservationsAtSource mocks base method.
func (m *MockServiceFacilitator) GetReservationsAtSource(arg0 context.Context) ([]*segment.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationsAtSource", arg0)
	ret0, _ := ret[0].([]*segment.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationsAtSource indicates an expected call of GetReservationsAtSource.
func (mr *MockServiceFacilitatorMockRecorder) GetReservationsAtSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationsAtSource", reflect.TypeOf((*MockServiceFacilitator)(nil).GetReservationsAtSource), arg0)
}

// PathsTo mocks base method.
func (m *MockServiceFacilitator) PathsTo(arg0 context.Context, arg1 addr.IA) ([]snet.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathsTo", arg0, arg1)
	ret0, _ := ret[0].([]snet.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PathsTo indicates an expected call of PathsTo.
func (mr *MockServiceFacilitatorMockRecorder) PathsTo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathsTo", reflect.TypeOf((*MockServiceFacilitator)(nil).PathsTo), arg0, arg1)
}

// SetupRequest mocks base method.
func (m *MockServiceFacilitator) SetupRequest(arg0 context.Context, arg1 *segment.SetupReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupRequest indicates an expected call of SetupRequest.
func (mr *MockServiceFacilitatorMockRecorder) SetupRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupRequest", reflect.TypeOf((*MockServiceFacilitator)(nil).SetupRequest), arg0, arg1)
}
