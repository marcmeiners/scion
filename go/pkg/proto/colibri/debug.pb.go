// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.3
// source: proto/colibri/v1/debug.proto

package colibri

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CmdTracerouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *ReservationID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UseColibri    bool           `protobuf:"varint,2,opt,name=use_colibri,json=useColibri,proto3" json:"use_colibri,omitempty"`
	DownDirection bool           `protobuf:"varint,3,opt,name=down_direction,json=downDirection,proto3" json:"down_direction,omitempty"`
}

func (x *CmdTracerouteRequest) Reset() {
	*x = CmdTracerouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_colibri_v1_debug_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdTracerouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdTracerouteRequest) ProtoMessage() {}

func (x *CmdTracerouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_colibri_v1_debug_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdTracerouteRequest.ProtoReflect.Descriptor instead.
func (*CmdTracerouteRequest) Descriptor() ([]byte, []int) {
	return file_proto_colibri_v1_debug_proto_rawDescGZIP(), []int{0}
}

func (x *CmdTracerouteRequest) GetId() *ReservationID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CmdTracerouteRequest) GetUseColibri() bool {
	if x != nil {
		return x.UseColibri
	}
	return false
}

func (x *CmdTracerouteRequest) GetDownDirection() bool {
	if x != nil {
		return x.DownDirection
	}
	return false
}

type CmdTracerouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *ReservationID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IaStamp              []uint64       `protobuf:"varint,2,rep,packed,name=ia_stamp,json=iaStamp,proto3" json:"ia_stamp,omitempty"`
	TimeStampFromRequest []uint64       `protobuf:"varint,3,rep,packed,name=time_stamp_from_request,json=timeStampFromRequest,proto3" json:"time_stamp_from_request,omitempty"`
	TimeStampAtResponse  []uint64       `protobuf:"varint,4,rep,packed,name=time_stamp_at_response,json=timeStampAtResponse,proto3" json:"time_stamp_at_response,omitempty"`
	ErrorFound           *ErrorInIA     `protobuf:"bytes,10,opt,name=error_found,json=errorFound,proto3" json:"error_found,omitempty"`
}

func (x *CmdTracerouteResponse) Reset() {
	*x = CmdTracerouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_colibri_v1_debug_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdTracerouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdTracerouteResponse) ProtoMessage() {}

func (x *CmdTracerouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_colibri_v1_debug_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdTracerouteResponse.ProtoReflect.Descriptor instead.
func (*CmdTracerouteResponse) Descriptor() ([]byte, []int) {
	return file_proto_colibri_v1_debug_proto_rawDescGZIP(), []int{1}
}

func (x *CmdTracerouteResponse) GetId() *ReservationID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CmdTracerouteResponse) GetIaStamp() []uint64 {
	if x != nil {
		return x.IaStamp
	}
	return nil
}

func (x *CmdTracerouteResponse) GetTimeStampFromRequest() []uint64 {
	if x != nil {
		return x.TimeStampFromRequest
	}
	return nil
}

func (x *CmdTracerouteResponse) GetTimeStampAtResponse() []uint64 {
	if x != nil {
		return x.TimeStampAtResponse
	}
	return nil
}

func (x *CmdTracerouteResponse) GetErrorFound() *ErrorInIA {
	if x != nil {
		return x.ErrorFound
	}
	return nil
}

type CmdIndexNewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ReservationID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CmdIndexNewRequest) Reset() {
	*x = CmdIndexNewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_colibri_v1_debug_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdIndexNewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdIndexNewRequest) ProtoMessage() {}

func (x *CmdIndexNewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_colibri_v1_debug_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdIndexNewRequest.ProtoReflect.Descriptor instead.
func (*CmdIndexNewRequest) Descriptor() ([]byte, []int) {
	return file_proto_colibri_v1_debug_proto_rawDescGZIP(), []int{2}
}

func (x *CmdIndexNewRequest) GetId() *ReservationID {
	if x != nil {
		return x.Id
	}
	return nil
}

type CmdIndexNewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorFound *ErrorInIA `protobuf:"bytes,1,opt,name=error_found,json=errorFound,proto3" json:"error_found,omitempty"`
	Index      uint32     `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *CmdIndexNewResponse) Reset() {
	*x = CmdIndexNewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_colibri_v1_debug_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdIndexNewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdIndexNewResponse) ProtoMessage() {}

func (x *CmdIndexNewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_colibri_v1_debug_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdIndexNewResponse.ProtoReflect.Descriptor instead.
func (*CmdIndexNewResponse) Descriptor() ([]byte, []int) {
	return file_proto_colibri_v1_debug_proto_rawDescGZIP(), []int{3}
}

func (x *CmdIndexNewResponse) GetErrorFound() *ErrorInIA {
	if x != nil {
		return x.ErrorFound
	}
	return nil
}

func (x *CmdIndexNewResponse) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type CmdIndexActivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *ReservationID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Index uint32         `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *CmdIndexActivateRequest) Reset() {
	*x = CmdIndexActivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_colibri_v1_debug_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdIndexActivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdIndexActivateRequest) ProtoMessage() {}

func (x *CmdIndexActivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_colibri_v1_debug_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdIndexActivateRequest.ProtoReflect.Descriptor instead.
func (*CmdIndexActivateRequest) Descriptor() ([]byte, []int) {
	return file_proto_colibri_v1_debug_proto_rawDescGZIP(), []int{4}
}

func (x *CmdIndexActivateRequest) GetId() *ReservationID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CmdIndexActivateRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type CmdIndexActivateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorFound *ErrorInIA `protobuf:"bytes,1,opt,name=error_found,json=errorFound,proto3" json:"error_found,omitempty"`
}

func (x *CmdIndexActivateResponse) Reset() {
	*x = CmdIndexActivateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_colibri_v1_debug_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdIndexActivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdIndexActivateResponse) ProtoMessage() {}

func (x *CmdIndexActivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_colibri_v1_debug_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdIndexActivateResponse.ProtoReflect.Descriptor instead.
func (*CmdIndexActivateResponse) Descriptor() ([]byte, []int) {
	return file_proto_colibri_v1_debug_proto_rawDescGZIP(), []int{5}
}

func (x *CmdIndexActivateResponse) GetErrorFound() *ErrorInIA {
	if x != nil {
		return x.ErrorFound
	}
	return nil
}

type CmdIndexCleanupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *ReservationID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Index uint32         `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *CmdIndexCleanupRequest) Reset() {
	*x = CmdIndexCleanupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_colibri_v1_debug_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdIndexCleanupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdIndexCleanupRequest) ProtoMessage() {}

func (x *CmdIndexCleanupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_colibri_v1_debug_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdIndexCleanupRequest.ProtoReflect.Descriptor instead.
func (*CmdIndexCleanupRequest) Descriptor() ([]byte, []int) {
	return file_proto_colibri_v1_debug_proto_rawDescGZIP(), []int{6}
}

func (x *CmdIndexCleanupRequest) GetId() *ReservationID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CmdIndexCleanupRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type CmdIndexCleanupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorFound *ErrorInIA `protobuf:"bytes,1,opt,name=error_found,json=errorFound,proto3" json:"error_found,omitempty"`
}

func (x *CmdIndexCleanupResponse) Reset() {
	*x = CmdIndexCleanupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_colibri_v1_debug_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdIndexCleanupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdIndexCleanupResponse) ProtoMessage() {}

func (x *CmdIndexCleanupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_colibri_v1_debug_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdIndexCleanupResponse.ProtoReflect.Descriptor instead.
func (*CmdIndexCleanupResponse) Descriptor() ([]byte, []int) {
	return file_proto_colibri_v1_debug_proto_rawDescGZIP(), []int{7}
}

func (x *CmdIndexCleanupResponse) GetErrorFound() *ErrorInIA {
	if x != nil {
		return x.ErrorFound
	}
	return nil
}

type TracerouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *ReservationID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UseColibri    bool           `protobuf:"varint,2,opt,name=use_colibri,json=useColibri,proto3" json:"use_colibri,omitempty"`
	DownDirection bool           `protobuf:"varint,3,opt,name=down_direction,json=downDirection,proto3" json:"down_direction,omitempty"`
}

func (x *TracerouteRequest) Reset() {
	*x = TracerouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_colibri_v1_debug_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteRequest) ProtoMessage() {}

func (x *TracerouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_colibri_v1_debug_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteRequest.ProtoReflect.Descriptor instead.
func (*TracerouteRequest) Descriptor() ([]byte, []int) {
	return file_proto_colibri_v1_debug_proto_rawDescGZIP(), []int{8}
}

func (x *TracerouteRequest) GetId() *ReservationID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TracerouteRequest) GetUseColibri() bool {
	if x != nil {
		return x.UseColibri
	}
	return false
}

func (x *TracerouteRequest) GetDownDirection() bool {
	if x != nil {
		return x.DownDirection
	}
	return false
}

type TracerouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *ReservationID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IaStamp              []uint64       `protobuf:"varint,2,rep,packed,name=ia_stamp,json=iaStamp,proto3" json:"ia_stamp,omitempty"`
	TimeStampFromRequest []uint64       `protobuf:"varint,3,rep,packed,name=time_stamp_from_request,json=timeStampFromRequest,proto3" json:"time_stamp_from_request,omitempty"`
	TimeStampAtResponse  []uint64       `protobuf:"varint,4,rep,packed,name=time_stamp_at_response,json=timeStampAtResponse,proto3" json:"time_stamp_at_response,omitempty"`
	ErrorFound           *ErrorInIA     `protobuf:"bytes,10,opt,name=error_found,json=errorFound,proto3" json:"error_found,omitempty"`
}

func (x *TracerouteResponse) Reset() {
	*x = TracerouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_colibri_v1_debug_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteResponse) ProtoMessage() {}

func (x *TracerouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_colibri_v1_debug_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteResponse.ProtoReflect.Descriptor instead.
func (*TracerouteResponse) Descriptor() ([]byte, []int) {
	return file_proto_colibri_v1_debug_proto_rawDescGZIP(), []int{9}
}

func (x *TracerouteResponse) GetId() *ReservationID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TracerouteResponse) GetIaStamp() []uint64 {
	if x != nil {
		return x.IaStamp
	}
	return nil
}

func (x *TracerouteResponse) GetTimeStampFromRequest() []uint64 {
	if x != nil {
		return x.TimeStampFromRequest
	}
	return nil
}

func (x *TracerouteResponse) GetTimeStampAtResponse() []uint64 {
	if x != nil {
		return x.TimeStampAtResponse
	}
	return nil
}

func (x *TracerouteResponse) GetErrorFound() *ErrorInIA {
	if x != nil {
		return x.ErrorFound
	}
	return nil
}

type ErrorInIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ia      uint64 `protobuf:"varint,1,opt,name=ia,proto3" json:"ia,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorInIA) Reset() {
	*x = ErrorInIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_colibri_v1_debug_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInIA) ProtoMessage() {}

func (x *ErrorInIA) ProtoReflect() protoreflect.Message {
	mi := &file_proto_colibri_v1_debug_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInIA.ProtoReflect.Descriptor instead.
func (*ErrorInIA) Descriptor() ([]byte, []int) {
	return file_proto_colibri_v1_debug_proto_rawDescGZIP(), []int{10}
}

func (x *ErrorInIA) GetIa() uint64 {
	if x != nil {
		return x.Ia
	}
	return 0
}

func (x *ErrorInIA) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_proto_colibri_v1_debug_proto protoreflect.FileDescriptor

var file_proto_colibri_v1_debug_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8f, 0x01, 0x0a, 0x14, 0x43, 0x6d, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x43, 0x6d, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x07, 0x69, 0x61, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x13, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x6e, 0x49, 0x41, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x22, 0x45, 0x0a, 0x12, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c,
	0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x13, 0x43, 0x6d, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e,
	0x49, 0x41, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x60, 0x0a, 0x17, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x58, 0x0a, 0x18, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x49, 0x41, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x22, 0x5f, 0x0a, 0x16, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x57, 0x0a, 0x17, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x49, 0x41, 0x52, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x69, 0x62,
	0x72, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x02, 0x0a, 0x12, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x07, 0x69, 0x61, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x17,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x14, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x49, 0x41, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x6e, 0x49, 0x41, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xb6, 0x03,
	0x0a, 0x1b, 0x43, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a,
	0x0d, 0x43, 0x6d, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6d, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x65, 0x77,
	0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6b, 0x0a, 0x10, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69,
	0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f,
	0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x70, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x69, 0x62, 0x72,
	0x69, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a,
	0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x63, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_colibri_v1_debug_proto_rawDescOnce sync.Once
	file_proto_colibri_v1_debug_proto_rawDescData = file_proto_colibri_v1_debug_proto_rawDesc
)

func file_proto_colibri_v1_debug_proto_rawDescGZIP() []byte {
	file_proto_colibri_v1_debug_proto_rawDescOnce.Do(func() {
		file_proto_colibri_v1_debug_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_colibri_v1_debug_proto_rawDescData)
	})
	return file_proto_colibri_v1_debug_proto_rawDescData
}

var file_proto_colibri_v1_debug_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_colibri_v1_debug_proto_goTypes = []interface{}{
	(*CmdTracerouteRequest)(nil),     // 0: proto.colibri.v1.CmdTracerouteRequest
	(*CmdTracerouteResponse)(nil),    // 1: proto.colibri.v1.CmdTracerouteResponse
	(*CmdIndexNewRequest)(nil),       // 2: proto.colibri.v1.CmdIndexNewRequest
	(*CmdIndexNewResponse)(nil),      // 3: proto.colibri.v1.CmdIndexNewResponse
	(*CmdIndexActivateRequest)(nil),  // 4: proto.colibri.v1.CmdIndexActivateRequest
	(*CmdIndexActivateResponse)(nil), // 5: proto.colibri.v1.CmdIndexActivateResponse
	(*CmdIndexCleanupRequest)(nil),   // 6: proto.colibri.v1.CmdIndexCleanupRequest
	(*CmdIndexCleanupResponse)(nil),  // 7: proto.colibri.v1.CmdIndexCleanupResponse
	(*TracerouteRequest)(nil),        // 8: proto.colibri.v1.TracerouteRequest
	(*TracerouteResponse)(nil),       // 9: proto.colibri.v1.TracerouteResponse
	(*ErrorInIA)(nil),                // 10: proto.colibri.v1.ErrorInIA
	(*ReservationID)(nil),            // 11: proto.colibri.v1.ReservationID
}
var file_proto_colibri_v1_debug_proto_depIdxs = []int32{
	11, // 0: proto.colibri.v1.CmdTracerouteRequest.id:type_name -> proto.colibri.v1.ReservationID
	11, // 1: proto.colibri.v1.CmdTracerouteResponse.id:type_name -> proto.colibri.v1.ReservationID
	10, // 2: proto.colibri.v1.CmdTracerouteResponse.error_found:type_name -> proto.colibri.v1.ErrorInIA
	11, // 3: proto.colibri.v1.CmdIndexNewRequest.id:type_name -> proto.colibri.v1.ReservationID
	10, // 4: proto.colibri.v1.CmdIndexNewResponse.error_found:type_name -> proto.colibri.v1.ErrorInIA
	11, // 5: proto.colibri.v1.CmdIndexActivateRequest.id:type_name -> proto.colibri.v1.ReservationID
	10, // 6: proto.colibri.v1.CmdIndexActivateResponse.error_found:type_name -> proto.colibri.v1.ErrorInIA
	11, // 7: proto.colibri.v1.CmdIndexCleanupRequest.id:type_name -> proto.colibri.v1.ReservationID
	10, // 8: proto.colibri.v1.CmdIndexCleanupResponse.error_found:type_name -> proto.colibri.v1.ErrorInIA
	11, // 9: proto.colibri.v1.TracerouteRequest.id:type_name -> proto.colibri.v1.ReservationID
	11, // 10: proto.colibri.v1.TracerouteResponse.id:type_name -> proto.colibri.v1.ReservationID
	10, // 11: proto.colibri.v1.TracerouteResponse.error_found:type_name -> proto.colibri.v1.ErrorInIA
	0,  // 12: proto.colibri.v1.ColibriDebugCommandsService.CmdTraceroute:input_type -> proto.colibri.v1.CmdTracerouteRequest
	2,  // 13: proto.colibri.v1.ColibriDebugCommandsService.CmdIndexNew:input_type -> proto.colibri.v1.CmdIndexNewRequest
	4,  // 14: proto.colibri.v1.ColibriDebugCommandsService.CmdIndexActivate:input_type -> proto.colibri.v1.CmdIndexActivateRequest
	6,  // 15: proto.colibri.v1.ColibriDebugCommandsService.CmdIndexCleanup:input_type -> proto.colibri.v1.CmdIndexCleanupRequest
	8,  // 16: proto.colibri.v1.ColibriDebugService.Traceroute:input_type -> proto.colibri.v1.TracerouteRequest
	1,  // 17: proto.colibri.v1.ColibriDebugCommandsService.CmdTraceroute:output_type -> proto.colibri.v1.CmdTracerouteResponse
	3,  // 18: proto.colibri.v1.ColibriDebugCommandsService.CmdIndexNew:output_type -> proto.colibri.v1.CmdIndexNewResponse
	5,  // 19: proto.colibri.v1.ColibriDebugCommandsService.CmdIndexActivate:output_type -> proto.colibri.v1.CmdIndexActivateResponse
	7,  // 20: proto.colibri.v1.ColibriDebugCommandsService.CmdIndexCleanup:output_type -> proto.colibri.v1.CmdIndexCleanupResponse
	9,  // 21: proto.colibri.v1.ColibriDebugService.Traceroute:output_type -> proto.colibri.v1.TracerouteResponse
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_colibri_v1_debug_proto_init() }
func file_proto_colibri_v1_debug_proto_init() {
	if File_proto_colibri_v1_debug_proto != nil {
		return
	}
	file_proto_colibri_v1_colibri_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_colibri_v1_debug_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdTracerouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_colibri_v1_debug_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdTracerouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_colibri_v1_debug_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdIndexNewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_colibri_v1_debug_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdIndexNewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_colibri_v1_debug_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdIndexActivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_colibri_v1_debug_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdIndexActivateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_colibri_v1_debug_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdIndexCleanupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_colibri_v1_debug_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdIndexCleanupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_colibri_v1_debug_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_colibri_v1_debug_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_colibri_v1_debug_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_colibri_v1_debug_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_colibri_v1_debug_proto_goTypes,
		DependencyIndexes: file_proto_colibri_v1_debug_proto_depIdxs,
		MessageInfos:      file_proto_colibri_v1_debug_proto_msgTypes,
	}.Build()
	File_proto_colibri_v1_debug_proto = out.File
	file_proto_colibri_v1_debug_proto_rawDesc = nil
	file_proto_colibri_v1_debug_proto_goTypes = nil
	file_proto_colibri_v1_debug_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ColibriDebugCommandsServiceClient is the client API for ColibriDebugCommandsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ColibriDebugCommandsServiceClient interface {
	CmdTraceroute(ctx context.Context, in *CmdTracerouteRequest, opts ...grpc.CallOption) (*CmdTracerouteResponse, error)
	CmdIndexNew(ctx context.Context, in *CmdIndexNewRequest, opts ...grpc.CallOption) (*CmdIndexNewResponse, error)
	CmdIndexActivate(ctx context.Context, in *CmdIndexActivateRequest, opts ...grpc.CallOption) (*CmdIndexActivateResponse, error)
	CmdIndexCleanup(ctx context.Context, in *CmdIndexCleanupRequest, opts ...grpc.CallOption) (*CmdIndexCleanupResponse, error)
}

type colibriDebugCommandsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewColibriDebugCommandsServiceClient(cc grpc.ClientConnInterface) ColibriDebugCommandsServiceClient {
	return &colibriDebugCommandsServiceClient{cc}
}

func (c *colibriDebugCommandsServiceClient) CmdTraceroute(ctx context.Context, in *CmdTracerouteRequest, opts ...grpc.CallOption) (*CmdTracerouteResponse, error) {
	out := new(CmdTracerouteResponse)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.ColibriDebugCommandsService/CmdTraceroute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colibriDebugCommandsServiceClient) CmdIndexNew(ctx context.Context, in *CmdIndexNewRequest, opts ...grpc.CallOption) (*CmdIndexNewResponse, error) {
	out := new(CmdIndexNewResponse)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.ColibriDebugCommandsService/CmdIndexNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colibriDebugCommandsServiceClient) CmdIndexActivate(ctx context.Context, in *CmdIndexActivateRequest, opts ...grpc.CallOption) (*CmdIndexActivateResponse, error) {
	out := new(CmdIndexActivateResponse)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.ColibriDebugCommandsService/CmdIndexActivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colibriDebugCommandsServiceClient) CmdIndexCleanup(ctx context.Context, in *CmdIndexCleanupRequest, opts ...grpc.CallOption) (*CmdIndexCleanupResponse, error) {
	out := new(CmdIndexCleanupResponse)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.ColibriDebugCommandsService/CmdIndexCleanup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColibriDebugCommandsServiceServer is the server API for ColibriDebugCommandsService service.
type ColibriDebugCommandsServiceServer interface {
	CmdTraceroute(context.Context, *CmdTracerouteRequest) (*CmdTracerouteResponse, error)
	CmdIndexNew(context.Context, *CmdIndexNewRequest) (*CmdIndexNewResponse, error)
	CmdIndexActivate(context.Context, *CmdIndexActivateRequest) (*CmdIndexActivateResponse, error)
	CmdIndexCleanup(context.Context, *CmdIndexCleanupRequest) (*CmdIndexCleanupResponse, error)
}

// UnimplementedColibriDebugCommandsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedColibriDebugCommandsServiceServer struct {
}

func (*UnimplementedColibriDebugCommandsServiceServer) CmdTraceroute(context.Context, *CmdTracerouteRequest) (*CmdTracerouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdTraceroute not implemented")
}
func (*UnimplementedColibriDebugCommandsServiceServer) CmdIndexNew(context.Context, *CmdIndexNewRequest) (*CmdIndexNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdIndexNew not implemented")
}
func (*UnimplementedColibriDebugCommandsServiceServer) CmdIndexActivate(context.Context, *CmdIndexActivateRequest) (*CmdIndexActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdIndexActivate not implemented")
}
func (*UnimplementedColibriDebugCommandsServiceServer) CmdIndexCleanup(context.Context, *CmdIndexCleanupRequest) (*CmdIndexCleanupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdIndexCleanup not implemented")
}

func RegisterColibriDebugCommandsServiceServer(s *grpc.Server, srv ColibriDebugCommandsServiceServer) {
	s.RegisterService(&_ColibriDebugCommandsService_serviceDesc, srv)
}

func _ColibriDebugCommandsService_CmdTraceroute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdTracerouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColibriDebugCommandsServiceServer).CmdTraceroute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.ColibriDebugCommandsService/CmdTraceroute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColibriDebugCommandsServiceServer).CmdTraceroute(ctx, req.(*CmdTracerouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColibriDebugCommandsService_CmdIndexNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdIndexNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColibriDebugCommandsServiceServer).CmdIndexNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.ColibriDebugCommandsService/CmdIndexNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColibriDebugCommandsServiceServer).CmdIndexNew(ctx, req.(*CmdIndexNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColibriDebugCommandsService_CmdIndexActivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdIndexActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColibriDebugCommandsServiceServer).CmdIndexActivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.ColibriDebugCommandsService/CmdIndexActivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColibriDebugCommandsServiceServer).CmdIndexActivate(ctx, req.(*CmdIndexActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColibriDebugCommandsService_CmdIndexCleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdIndexCleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColibriDebugCommandsServiceServer).CmdIndexCleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.ColibriDebugCommandsService/CmdIndexCleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColibriDebugCommandsServiceServer).CmdIndexCleanup(ctx, req.(*CmdIndexCleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ColibriDebugCommandsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.colibri.v1.ColibriDebugCommandsService",
	HandlerType: (*ColibriDebugCommandsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CmdTraceroute",
			Handler:    _ColibriDebugCommandsService_CmdTraceroute_Handler,
		},
		{
			MethodName: "CmdIndexNew",
			Handler:    _ColibriDebugCommandsService_CmdIndexNew_Handler,
		},
		{
			MethodName: "CmdIndexActivate",
			Handler:    _ColibriDebugCommandsService_CmdIndexActivate_Handler,
		},
		{
			MethodName: "CmdIndexCleanup",
			Handler:    _ColibriDebugCommandsService_CmdIndexCleanup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/colibri/v1/debug.proto",
}

// ColibriDebugServiceClient is the client API for ColibriDebugService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ColibriDebugServiceClient interface {
	Traceroute(ctx context.Context, in *TracerouteRequest, opts ...grpc.CallOption) (*TracerouteResponse, error)
}

type colibriDebugServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewColibriDebugServiceClient(cc grpc.ClientConnInterface) ColibriDebugServiceClient {
	return &colibriDebugServiceClient{cc}
}

func (c *colibriDebugServiceClient) Traceroute(ctx context.Context, in *TracerouteRequest, opts ...grpc.CallOption) (*TracerouteResponse, error) {
	out := new(TracerouteResponse)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.ColibriDebugService/Traceroute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColibriDebugServiceServer is the server API for ColibriDebugService service.
type ColibriDebugServiceServer interface {
	Traceroute(context.Context, *TracerouteRequest) (*TracerouteResponse, error)
}

// UnimplementedColibriDebugServiceServer can be embedded to have forward compatible implementations.
type UnimplementedColibriDebugServiceServer struct {
}

func (*UnimplementedColibriDebugServiceServer) Traceroute(context.Context, *TracerouteRequest) (*TracerouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Traceroute not implemented")
}

func RegisterColibriDebugServiceServer(s *grpc.Server, srv ColibriDebugServiceServer) {
	s.RegisterService(&_ColibriDebugService_serviceDesc, srv)
}

func _ColibriDebugService_Traceroute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracerouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColibriDebugServiceServer).Traceroute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.ColibriDebugService/Traceroute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColibriDebugServiceServer).Traceroute(ctx, req.(*TracerouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ColibriDebugService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.colibri.v1.ColibriDebugService",
	HandlerType: (*ColibriDebugServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Traceroute",
			Handler:    _ColibriDebugService_Traceroute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/colibri/v1/debug.proto",
}
